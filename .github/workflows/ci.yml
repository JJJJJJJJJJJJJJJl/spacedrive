name: CI

on:
  pull_request:
  push:
    branches:
      - main
    paths-ignore:
      - '**/.md'
  workflow_dispatch:

env:
  SPACEDRIVE_CUSTOM_APT_FLAGS: --no-install-recommends

jobs:
  typescript:
    name: TypeScript
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 17

      - name: Install pnpm
        uses: pnpm/action-setup@v2.2.2
        with:
          version: 7.x.x
          run_install: false

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install pnpm dependencies
        run: pnpm --frozen-lockfile i

      - name: Perform typechecks
        run: pnpm typecheck

  rustfmt:
    name: rustfmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: rustfmt

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v1
        with:
          sharedKey: core-v1-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Prisma codegen
        id: cache-prisma
        uses: actions/cache@v3
        with:
          path: ./core/src/prisma.rs
          key: prisma-${{ runner.os }}-${{ hashFiles('./core/prisma/*', './Cargo.toml') }}

      - name: Generate Prisma client
        working-directory: core
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: cargo run -p prisma-cli --release -- generate

      - name: Run rustfmt
        run: cargo fmt --all -- --check

  build-core:
    name: Build Core (${{ matrix.platform }})
    runs-on: ${{ matrix.platform }}
    strategy:
      fail-fast: true
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - name: Log in to the Container registry
        if: matrix.platform == 'ubuntu-latest' && github.event_name != 'pull_request'
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 17

      - name: Install pnpm
        uses: pnpm/action-setup@v2.0.1
        with:
          version: 7
          run_install: false

      - name: Install Rust stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: rustfmt, rust-src

      - name: Cache Rust Dependencies
        uses: Swatinem/rust-cache@v1

      - name: Run 'setup-system.sh' script
        if: matrix.platform == 'ubuntu-latest' || matrix.platform == 'macos-latest'
        run: ./.github/scripts/setup-system.sh

      - name: Run 'setup-system.ps1' script
        if: matrix.platform == 'windows-latest'
        run: ./.github/scripts/setup-system.ps1 -ci

      - name: Get pnpm store directory
        id: pnpm-cache
        run: |
          echo "::set-output name=pnpm_cache_dir::$(pnpm store path)"

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ steps.pnpm-cache.outputs.pnpm_cache_dir }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install pnpm dependencies
        run: pnpm --frozen-lockfile i

      - name: Cache Prisma codegen
        id: cache-prisma
        uses: actions/cache@v3
        with:
          path: ./core/src/prisma.rs
          key: prisma-${{ runner.os }}-${{ hashFiles('./core/prisma/*', './Cargo.toml') }}

      - name: Generate Prisma client
        working-directory: core
        if: steps.cache-prisma.outputs.cache-hit != 'true'
        run: cargo run -p prisma-cli --release -- generate

      - name: Cargo fetch
        run: cargo fetch

      - name: Check Core
        run: cargo check -p sdcore --release

      - name: Bundle Desktop
        run: pnpm desktop tauri build

      - name: Publish artifacts
        uses: ./.github/actions/publish-artifacts
